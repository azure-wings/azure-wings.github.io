<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WIP on</title><link>https://azure-wings.github.io/tags/WIP/</link><description>Recent content in WIP on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://azure-wings.github.io/tags/WIP/index.xml" rel="self" type="application/rss+xml"/><item><title>Abstract algebra</title><link>https://azure-wings.github.io/notes/Abstract-algebra/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Abstract-algebra/</guid><description>Abstract algebra is the study of algebraic structures such as groups, rings, fields, modules, vector spaces, lattices, and algebras.
Group theory Group Ring theory Modules and vector spaces Field theory Galois theory Finite groups</description></item><item><title>Abstract syntax</title><link>https://azure-wings.github.io/notes/Abstract-syntax/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Abstract-syntax/</guid><description>Abstract syntax formally express multiple components and subcomponents the program consists of.
Abstract Syntax Tree (AST) Abstract syntax are often described in the form of trees.</description></item><item><title>Algorithms</title><link>https://azure-wings.github.io/notes/Algorithms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Algorithms/</guid><description/></item><item><title>Artificial intelligence</title><link>https://azure-wings.github.io/notes/Artificial-intelligence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Artificial-intelligence/</guid><description>Artificial intelligence is is intelligence demonstrated by machines, as opposed to the natural intelligence displayed by animals including humans.
Basics Mathematics Linear algebra Vector analysis Statistics Goals Planning Automated planning and scheduling Learning Machine learning Natural language processing Natural language processing Perception Computer vision Speech recognition</description></item><item><title>Computer architecture</title><link>https://azure-wings.github.io/notes/Computer-architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Computer-architecture/</guid><description>Computer architecture is a set of rules and methods that describe the functionality, organisation, and implementation of computer systems.
Computer Abstractions Performance Instructions MIPS Assembly language Representation of MIPS instructions in the computer</description></item><item><title>Computer graphics</title><link>https://azure-wings.github.io/notes/Computer-graphics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Computer-graphics/</guid><description/></item><item><title>Computer vision</title><link>https://azure-wings.github.io/notes/Computer-vision/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Computer-vision/</guid><description/></item><item><title>Coordinates</title><link>https://azure-wings.github.io/notes/Coordinates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Coordinates/</guid><description/></item><item><title>Cramer's rule</title><link>https://azure-wings.github.io/notes/Cramers-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Cramers-rule/</guid><description/></item><item><title>Critical section</title><link>https://azure-wings.github.io/notes/Critical-section/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Critical-section/</guid><description>Definition A critical section is a sequence of code that atomically accesses shared state.</description></item><item><title>Deadlock</title><link>https://azure-wings.github.io/notes/Deadlock/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Deadlock/</guid><description/></item><item><title>Determinant</title><link>https://azure-wings.github.io/notes/Determinant/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Determinant/</guid><description/></item><item><title>Dimension</title><link>https://azure-wings.github.io/notes/Dimension/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Dimension/</guid><description/></item><item><title>Fundamental theorem of linear algebra</title><link>https://azure-wings.github.io/notes/Fundamental-theorem-of-linear-algebra/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Fundamental-theorem-of-linear-algebra/</guid><description/></item><item><title>Isomorphism</title><link>https://azure-wings.github.io/notes/Isomorphism/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Isomorphism/</guid><description/></item><item><title>Linear algebra</title><link>https://azure-wings.github.io/notes/Linear-algebra/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Linear-algebra/</guid><description>Linear algebra is the branch of mathematics concerning linear equations, linear transformations (maps), and their representations in vector spaces and through matrices.</description></item><item><title>Linear transformation</title><link>https://azure-wings.github.io/notes/Linear-transformation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Linear-transformation/</guid><description/></item><item><title>Machine learning</title><link>https://azure-wings.github.io/notes/Machine-learning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Machine-learning/</guid><description/></item><item><title>Mathematical logic</title><link>https://azure-wings.github.io/notes/Mathematical-logic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Mathematical-logic/</guid><description/></item><item><title>MIPS Assembly language</title><link>https://azure-wings.github.io/notes/MIPS-Assembly-language/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/MIPS-Assembly-language/</guid><description>Operands and operations MIPS Operands Registers(2^5 = 32): $s0-$s7, $t0-$t9, $zero, $a0-$a3, $v0-$v1, $gp, $fp, $sp, $ra, $at Memory words (2^30): Memory[X] MIPS assembly language Category Instruction Example Meaning Arithmetic Add add $s1, $s2, $s3 $s1 = $s2 + $s3 Subtraction sub $s1, $s2, $s3 $s1 = $s2 - $s3 Add immediate addi $s1, $s2, 20 $s1 = $s2 + 20 Data Transfer Load word lw $s1, 20($s2) $s1 = Memory[$s2 + 20] Store word sw $s1, 20($s2) Memory[$s2 + 20] = $s1 Load half lh Load half unsigned lhu Store half sh Load byte lb Load byte unsigned lbu Store byte sb Load linked word ll Store condition.</description></item><item><title>Multilinear form</title><link>https://azure-wings.github.io/notes/Multilinear-form/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Multilinear-form/</guid><description/></item><item><title>Operating systems</title><link>https://azure-wings.github.io/notes/Operating-systems/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Operating-systems/</guid><description>Kernels and Processes Process Dual-mode operation Mode transfer Implementation of mode transfer x86 Mode transfer Secure system call System upcalls Concurrency and Threads Thread Comparison between processes and threads Thread data structures Thread life cycle Thread models Synchronisation Atomic operation Critical section Race condition Too much milk problem Bounded buffer problem Lock Condition variable Semaphore Deadlock Scheduling Separation of mechanism and policy</description></item><item><title>Parser</title><link>https://azure-wings.github.io/notes/Parser/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Parser/</guid><description/></item><item><title>Programming language theory</title><link>https://azure-wings.github.io/notes/Programming-language-theory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Programming-language-theory/</guid><description>Programming language theory (PLT) is a branch of computer science that deals with the design, implementation, analysis, characterisation, and classification of formal languages known as programming languages and of their individual features.</description></item><item><title>Properties of determinant</title><link>https://azure-wings.github.io/notes/Properties-of-determinant/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Properties-of-determinant/</guid><description/></item><item><title>Semantics</title><link>https://azure-wings.github.io/notes/Semantics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Semantics/</guid><description/></item><item><title>Semaphore</title><link>https://azure-wings.github.io/notes/Semaphore/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Semaphore/</guid><description/></item><item><title>Set theory</title><link>https://azure-wings.github.io/notes/Set-theory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Set-theory/</guid><description/></item><item><title>Statistics</title><link>https://azure-wings.github.io/notes/Statistics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Statistics/</guid><description/></item><item><title>Syntax</title><link>https://azure-wings.github.io/notes/Syntax/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Syntax/</guid><description>Syntax of a programming language decides the apprearance of the language. It allows us to know which strings are programs and what the structures of the programs are.</description></item><item><title>Topology</title><link>https://azure-wings.github.io/notes/Topology/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Topology/</guid><description/></item><item><title>Vector analysis</title><link>https://azure-wings.github.io/notes/Vector-analysis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Vector-analysis/</guid><description/></item></channel></rss>