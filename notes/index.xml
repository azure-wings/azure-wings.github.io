<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Notes on</title><link>https://azure-wings.github.io/notes/</link><description>Recent content in Notes on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://azure-wings.github.io/notes/index.xml" rel="self" type="application/rss+xml"/><item><title>Abstract algebra</title><link>https://azure-wings.github.io/notes/Abstract-algebra/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Abstract-algebra/</guid><description>Abstract algebra is the study of algebraic structures such as groups, rings, fields, modules, vector spaces, lattices, and algebras.
Group theory Group Ring theory Modules and vector spaces Field theory Galois theory Finite groups</description></item><item><title>Abstract syntax</title><link>https://azure-wings.github.io/notes/Abstract-syntax/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Abstract-syntax/</guid><description>Abstract syntax formally express multiple components and subcomponents the program consists of.
Abstract Syntax Tree (AST) Abstract syntax are often described in the form of trees.</description></item><item><title>Additional basic operations</title><link>https://azure-wings.github.io/notes/Additional-basic-operations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Additional-basic-operations/</guid><description>Rename operation SQL allows renaming relations and attributes using the AS clause.
1 old_nameASnew_name The keyword AS is optional and may be omitted.</description></item><item><title>Aggregate functions</title><link>https://azure-wings.github.io/notes/Aggregate-functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Aggregate-functions/</guid><description>Aggregate functions are functions that take a collection of values as input, and return a single value.
SQL offers five aggregate functions:</description></item><item><title>Algorithms</title><link>https://azure-wings.github.io/notes/Algorithms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Algorithms/</guid><description/></item><item><title>Alternating multilinear form</title><link>https://azure-wings.github.io/notes/Alternating-multilinear-form/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Alternating-multilinear-form/</guid><description/></item><item><title>Approximation theory</title><link>https://azure-wings.github.io/notes/Approximation-theory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Approximation-theory/</guid><description>Approximation theory is concerned with how functions can best be approximated with simpler functions, and with quantitatively characterising the errors introduced thereby.</description></item><item><title>Artificial intelligence</title><link>https://azure-wings.github.io/notes/Artificial-intelligence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Artificial-intelligence/</guid><description>Artificial intelligence is is intelligence demonstrated by machines, as opposed to the natural intelligence displayed by animals including humans.
Basics Mathematics Linear algebra Vector analysis Statistics Goals Planning Automated planning and scheduling Learning Machine learning Natural language processing Natural language processing Perception Computer vision Speech recognition</description></item><item><title>Atomic operation</title><link>https://azure-wings.github.io/notes/Atomic-operation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Atomic-operation/</guid><description>Definition An atomic operation is an indivisible operation that cannot be ineterleaved or split by other operations.
Examples On most modern architectures, a load or store of a 32-bit word from or to memory is an atomic operation.</description></item><item><title>Basic Structure of SQL Queries</title><link>https://azure-wings.github.io/notes/Basic-structure-of-SQL-queries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Basic-structure-of-SQL-queries/</guid><description>Basic Query Structure A typical SQL query has the following form.
1 2 3 SELECTA_1,...,A_nFROMr_1,...,r_mWHEREp A_i: Attributes r_i: Relations p: Predicate The result of an SQL query is a relation.</description></item><item><title>Basis</title><link>https://azure-wings.github.io/notes/Basis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Basis/</guid><description>Definition Let $V$ be a vector space and $\beta$ be a subset of $V$.
If $\beta$ is linearly independent and spans $V$, then $\beta$ is a basis of $V$.</description></item><item><title>Bernstein polynomial</title><link>https://azure-wings.github.io/notes/Bernstein-polynomial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Bernstein-polynomial/</guid><description>A Bernstein polynomial is a polynomial that is a linear combination of Bernstein basis polynomials.
Definition The $n +1$ Bernstein basis polynomials of degree $n$ are defined as</description></item><item><title>Bounded buffer problem</title><link>https://azure-wings.github.io/notes/Bounded-buffer-problem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Bounded-buffer-problem/</guid><description>Definition 1 2 3 4 5 +----------+ +----------+ | | +----------+ | | | Producer |---&amp;gt;| Buffer |---&amp;gt;| Consumer | | | +----------+ | | +----------+ +----------+ The producer puts objects into a shared buffer.</description></item><item><title>Cauchy-Schwartz Inequality</title><link>https://azure-wings.github.io/notes/Cauchy-Schwartz-inequality/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Cauchy-Schwartz-inequality/</guid><description>Theorem For any vectors $\mathbf{x},\mathbf{y} \in \mathbb{R}^n$, $$ |\mathbf{x}^\top\mathbf{y}| \leq |\mathbf{x}|_2|\mathbf{y}|_2. $$
Generalization See Hölder&amp;rsquo;s inequality.</description></item><item><title>Comparison between processes and threads</title><link>https://azure-wings.github.io/notes/Comparison-between-processes-and-threads/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Comparison-between-processes-and-threads/</guid><description>Comparison Processes Threads Switch Overhead High (CPU state + Memory, I/O state) Low (CPU state only) Creation Cost High Low CPU Protection Yes Yes Memory, I/O Protection Yes No Sharing Overhead High (Involves at leas a context switch) Low (Because thread switch overhead is low; may not need to switch context) Sharing Security High (One process cannot corrupt the other) Low (A thread can write the memory used by another thread) Diagrams</description></item><item><title>Computer architecture</title><link>https://azure-wings.github.io/notes/Computer-architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Computer-architecture/</guid><description>Computer architecture is a set of rules and methods that describe the functionality, organisation, and implementation of computer systems.
Computer Abstractions Performance Instructions MIPS Assembly language Representation of MIPS instructions in the computer</description></item><item><title>Computer graphics</title><link>https://azure-wings.github.io/notes/Computer-graphics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Computer-graphics/</guid><description/></item><item><title>Computer vision</title><link>https://azure-wings.github.io/notes/Computer-vision/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Computer-vision/</guid><description/></item><item><title>Concrete syntax</title><link>https://azure-wings.github.io/notes/Concrete-syntax/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Concrete-syntax/</guid><description>Concrete syntax determines whether a certain string is a program or not.
Intuition Let $C$ be the set of all characters.</description></item><item><title>Condition variable</title><link>https://azure-wings.github.io/notes/Condition-variable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Condition-variable/</guid><description>Definition A condition variable is a synchronisation object that lets a thread efficiently wait for a change to shared state that is protected by a lock.</description></item><item><title>Coordinates</title><link>https://azure-wings.github.io/notes/Coordinates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Coordinates/</guid><description/></item><item><title>Cramer's rule</title><link>https://azure-wings.github.io/notes/Cramers-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Cramers-rule/</guid><description/></item><item><title>Critical section</title><link>https://azure-wings.github.io/notes/Critical-section/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Critical-section/</guid><description>Definition A critical section is a sequence of code that atomically accesses shared state.</description></item><item><title>Database systems</title><link>https://azure-wings.github.io/notes/Database-systems/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Database-systems/</guid><description>A database is an organised collection of interrelated data that models some aspect of the real world. A database management system(DBMS) is a collection of interrelated data and a set of programs to access those data.</description></item><item><title>Deadlock</title><link>https://azure-wings.github.io/notes/Deadlock/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Deadlock/</guid><description/></item><item><title>Determinant</title><link>https://azure-wings.github.io/notes/Determinant/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Determinant/</guid><description/></item><item><title>Dimension</title><link>https://azure-wings.github.io/notes/Dimension/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Dimension/</guid><description/></item><item><title>Dual-mode operation</title><link>https://azure-wings.github.io/notes/Dual-mode-operation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Dual-mode-operation/</guid><description>Definition Dual-mode operation of a kernel consists of two modes: user mode and kernel mode.
In user mode, the processor checks each instruction before executing it to verify that it is permitted to be performed by that process.</description></item><item><title>Field</title><link>https://azure-wings.github.io/notes/Field/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Field/</guid><description>Definition A field $F$ is a set on which two operations $+$ (addition) and $\cdot$ (multiplication) are defined so that the followings hold.</description></item><item><title>Fundamental theorem of linear algebra</title><link>https://azure-wings.github.io/notes/Fundamental-theorem-of-linear-algebra/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Fundamental-theorem-of-linear-algebra/</guid><description/></item><item><title>Group</title><link>https://azure-wings.github.io/notes/Group/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Group/</guid><description>Definition A group is an ordered pair $(G, \cdot)$ where $G$ is a set and $\cdot$ is a binary operation on $G$ satisfying the following axioms:</description></item><item><title>Hölder's Inequality</title><link>https://azure-wings.github.io/notes/H%C3%B6lders-inequality/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/H%C3%B6lders-inequality/</guid><description>Theorem For any vectors $\mathbf{x},\mathbf{y} \in \mathbb{R}^n$ and for any $p,q \geq 1$ such that $\frac{1}{p} + \frac{1}{q} = 1$, it holds that $$ |\mathbf{x}^\top\mathbf{y}| \leq \sum\limits_{i=1}^n|x_iy_i| \leq |\mathbf{x}|_p|\mathbf{y}|_q.</description></item><item><title>Implementation of mode transfer</title><link>https://azure-wings.github.io/notes/Implementation-of-mode-transfer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Implementation-of-mode-transfer/</guid><description>Importance The context switch ( mode transfer) must be carefully crafted, and it relies on hardware support. To avoid confusion and reduce the possibility of error, m most operating systems have a common sequence of instructions both for entering the kernel and for returning to user level, regardeless of te cause.</description></item><item><title>Inner product</title><link>https://azure-wings.github.io/notes/Inner-product/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Inner-product/</guid><description>Definition An inner product on a vector space $V$ over a field is a function $\langle \cdot,\cdot\rangle:V^2 \to F$ that satisfies the followings:</description></item><item><title>Isomorphism</title><link>https://azure-wings.github.io/notes/Isomorphism/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Isomorphism/</guid><description/></item><item><title>Join expressions</title><link>https://azure-wings.github.io/notes/Join-expressions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Join-expressions/</guid><description>Natural join The natural join operation operates on two relations and produces a relation as a result.
It matches tuples with the same values for all common attributes, and retains only one copy of each common attribute.</description></item><item><title>Keys</title><link>https://azure-wings.github.io/notes/Keys/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Keys/</guid><description>We must have a way to specify how tuples within a given relation are distinguished; no two tuples in a relation are allowed to have exactly the same value for all attributes.</description></item><item><title>Linear algebra</title><link>https://azure-wings.github.io/notes/Linear-algebra/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Linear-algebra/</guid><description>Linear algebra is the branch of mathematics concerning linear equations, linear transformations (maps), and their representations in vector spaces and through matrices.</description></item><item><title>Linear combination</title><link>https://azure-wings.github.io/notes/Linear-combination/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Linear-combination/</guid><description>Definition Let $V$ be a vector space over the field $F$. Let $S$ be a nonempty subset of $V$. A nonempty vector $\mathbf{v} \in V$ is called a linear combination of vectors of $S$ if there exist a finite number of vectors $\mathbf{u}_1, \cdots, \mathbf{u}_n$ and scalars $a_i, \cdots, a_n$ such that</description></item><item><title>Linear independence</title><link>https://azure-wings.github.io/notes/Linear-independence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Linear-independence/</guid><description>Definition A subset $S$ of a vector space $V$ is called linearly dependent if there exist a finite number of distinct vectors $\mathbf{u}_1, \cdots, \mathbf{u}_n$ in $S$ and scalars $a_1, \cdots, a_n$, not all zero, such that</description></item><item><title>Linear transformation</title><link>https://azure-wings.github.io/notes/Linear-transformation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Linear-transformation/</guid><description/></item><item><title>Lock</title><link>https://azure-wings.github.io/notes/Lock/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Lock/</guid><description>Definition A lock is a synchronisation variable that provides mutual exclusion - when one thread holds a lock, no other thread can hold it.</description></item><item><title>Machine learning</title><link>https://azure-wings.github.io/notes/Machine-learning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Machine-learning/</guid><description/></item><item><title>Mathematical logic</title><link>https://azure-wings.github.io/notes/Mathematical-logic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Mathematical-logic/</guid><description/></item><item><title>MIPS Assembly language</title><link>https://azure-wings.github.io/notes/MIPS-Assembly-language/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/MIPS-Assembly-language/</guid><description>Operands and operations MIPS Operands Registers(2^5 = 32): $s0-$s7, $t0-$t9, $zero, $a0-$a3, $v0-$v1, $gp, $fp, $sp, $ra, $at Memory words (2^30): Memory[X] MIPS assembly language Category Instruction Example Meaning Arithmetic Add add $s1, $s2, $s3 $s1 = $s2 + $s3 Subtraction sub $s1, $s2, $s3 $s1 = $s2 - $s3 Add immediate addi $s1, $s2, 20 $s1 = $s2 + 20 Data Transfer Load word lw $s1, 20($s2) $s1 = Memory[$s2 + 20] Store word sw $s1, 20($s2) Memory[$s2 + 20] = $s1 Load half lh Load half unsigned lhu Store half sh Load byte lb Load byte unsigned lbu Store byte sb Load linked word ll Store condition.</description></item><item><title>Mode transfer</title><link>https://azure-wings.github.io/notes/Mode-transfer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Mode-transfer/</guid><description>The operating system must provide a way to safely transfer between user mode and kernel mode.
User to Kernel Mode There are three reasons for the kernel to take control from a user process: interrupts, processor exceptions, and system calls.</description></item><item><title>Modification of the database</title><link>https://azure-wings.github.io/notes/Modification-of-the-database/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Modification-of-the-database/</guid><description>Deletion A delete request can only delete whole tuples; deleting values on only particular attributes is not allowed.
1 2 DELETEFROMrWHEREp r: Relation p: Predicate The DELETE statement first finds all tuples t in r for which P(t) is true, and then deletes them from r.</description></item><item><title>Multilinear form</title><link>https://azure-wings.github.io/notes/Multilinear-form/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Multilinear-form/</guid><description/></item><item><title>Nested subqueries</title><link>https://azure-wings.github.io/notes/Nested-subqueries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Nested-subqueries/</guid><description>A subquery is a SELECT - FROM - WHERE expression that is nested within another query.
SQL provides a mechanism for the nesting of subqueries.</description></item><item><title>Norm</title><link>https://azure-wings.github.io/notes/Norm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Norm/</guid><description>Intuition WIP
Definition A function $\lVert\cdot\rVert: V\to \mathbb{R}$ is a norm if it satisfies the followings:
For arbitrary $\mathbf{x},\mathbf{y}\in V$ and $c \in \mathbb{R}$,</description></item><item><title>Null values in SQL</title><link>https://azure-wings.github.io/notes/Null-values-in-SQL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Null-values-in-SQL/</guid><description>NULL values signifies an unknown value or that a value does not exist.
Arithmetic operations The result of any arithmetic expression involving NULL is NULL.</description></item><item><title>Operating systems</title><link>https://azure-wings.github.io/notes/Operating-systems/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Operating-systems/</guid><description>Kernels and Processes Process Dual-mode operation Mode transfer Implementation of mode transfer x86 Mode transfer Secure system call System upcalls Concurrency and Threads Thread Comparison between processes and threads Thread data structures Thread life cycle Thread models Synchronisation Atomic operation Critical section Race condition Too much milk problem Bounded buffer problem Lock Condition variable Semaphore Deadlock Scheduling Separation of mechanism and policy</description></item><item><title>Overview of SQL</title><link>https://azure-wings.github.io/notes/Overview-of-SQL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Overview-of-SQL/</guid><description>SQL Parts Data-Definition Language (DDL)
Provides commands for defining relation schemas, deleting relations, and modifying relation schemas.
Data-Manipulation Language (DML)</description></item><item><title>Parser</title><link>https://azure-wings.github.io/notes/Parser/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Parser/</guid><description/></item><item><title>Performance</title><link>https://azure-wings.github.io/notes/Performance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Performance/</guid><description>Defining Performance Response time (execution time): The time between start and completion of a task Throughput (Bandwidth): The number of tasks completed per unit time Measuring Performance Clock cycle (s): The time for one clock period (usually the processor clock) - constant Clock rate (Hz): The inverse of clock period CPU execution time: The time CPU spends computing for a certain task (does not include time spent waiting for I/O or running other programs) $$ \begin{align*} \text{CPU time} &amp;amp;= \text{CPU clock cycles} \times \text{Clock cycle time}\ &amp;amp;= \frac{\text{CPU clock cycles}}{\text{Clock rate}} \end{align*} $$ CPI (Clock cycles per instruction): The average number of clock cycles per instruction for a program or program fragment.</description></item><item><title>Process</title><link>https://azure-wings.github.io/notes/Process/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Process/</guid><description>A process is an instance of a program; it is the execution of a program with restricted rights. Processes provide the illusion of an infinite number of machines.</description></item><item><title>Programming language theory</title><link>https://azure-wings.github.io/notes/Programming-language-theory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Programming-language-theory/</guid><description>Programming language theory (PLT) is a branch of computer science that deals with the design, implementation, analysis, characterisation, and classification of formal languages known as programming languages and of their individual features.</description></item><item><title>Properties of determinant</title><link>https://azure-wings.github.io/notes/Properties-of-determinant/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Properties-of-determinant/</guid><description/></item><item><title>Purpose of database systems</title><link>https://azure-wings.github.io/notes/Purpose-of-database-systems/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Purpose-of-database-systems/</guid><description>In the early days, database applications were built directly on top of file systems, which leads to several disadvantages.
Data redundancy and inconsistency</description></item><item><title>Race condition</title><link>https://azure-wings.github.io/notes/Race-condition/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Race-condition/</guid><description>Definition A race condition is a situation where multiple process access and manipulate the same data concurrently, and the outcome of the execution depends on the particular order (interleaving) of such accesses.</description></item><item><title>Relational algebra</title><link>https://azure-wings.github.io/notes/Relational-algebra/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Relational-algebra/</guid><description>A relational algebra is a procedural [[notes/Relational query language | query language]] consisting of a set of operations that take one or two relations as input and produce a new relation as their result.</description></item><item><title>Relational query language</title><link>https://azure-wings.github.io/notes/Relational-query-language/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Relational-query-language/</guid><description>A query language is a language in which a user requests information from the database.
There are some ‘pure’ query languages, equivalent in computing power.</description></item><item><title>Secure system call</title><link>https://azure-wings.github.io/notes/Secure-system-call/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Secure-system-call/</guid><description>Importance The kernel must implement its system calls in a way that protects itself from all errors and attacks that might be launched by the misuse of the interface.</description></item><item><title>Semantic</title><link>https://azure-wings.github.io/notes/Semantic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Semantic/</guid><description/></item><item><title>Semaphore</title><link>https://azure-wings.github.io/notes/Semaphore/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Semaphore/</guid><description/></item><item><title>Separation of mechanism and policy</title><link>https://azure-wings.github.io/notes/Separation-of-mechanism-and-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Separation-of-mechanism-and-policy/</guid><description>Definition The separation of mechanism and policy is a design principle in computer science. According to the separation of mechanism and policy principle, mechanism should work no matter what policy is used.</description></item><item><title>Set operations in SQL</title><link>https://azure-wings.github.io/notes/Set-operations-in-SQL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Set-operations-in-SQL/</guid><description>UNION operation The SQL operation UNION corresponds to the mathematical operation $\cup$.
1 R1UNIONR2 The UNION operation automatically eliminates duplicates.</description></item><item><title>Set theory</title><link>https://azure-wings.github.io/notes/Set-theory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Set-theory/</guid><description/></item><item><title>Span</title><link>https://azure-wings.github.io/notes/Span/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Span/</guid><description>Definition Let $S$ be a nonempty subset of a vector space $V$.
The span of $S$, denoted $\text{span}(S)$ or $\langle S \rangle$, is the set consisting of all linear combinations of the vectors in $S$.</description></item><item><title>SQL data definition</title><link>https://azure-wings.github.io/notes/SQL-data-definition/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/SQL-data-definition/</guid><description>Domain types in SQL char(n)
Fixed-length character string, with user-specified length n
varchar(n)
Variable-length character string, with user-specified maximum length n</description></item><item><title>Statistics</title><link>https://azure-wings.github.io/notes/Statistics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Statistics/</guid><description/></item><item><title>Structure of relational databases</title><link>https://azure-wings.github.io/notes/Structure-of-relational-databases/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Structure-of-relational-databases/</guid><description>A relational database consists of a collection of tables, each of which is assigned a unique name. In general, a row in a table represents a relationship among a set of values.</description></item><item><title>Subspace</title><link>https://azure-wings.github.io/notes/Subspace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Subspace/</guid><description>Definition Let $V$ be a vector space over the field $F$. A subspace of $V$ is a subset $W \subset V$ which itself is a vector space over $F$ with the same operations defined on $V$.</description></item><item><title>Syntax</title><link>https://azure-wings.github.io/notes/Syntax/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Syntax/</guid><description>Syntax of a programming language decides the apprearance of the language. It allows us to know which strings are programs and what the structures of the programs are.</description></item><item><title>System upcalls</title><link>https://azure-wings.github.io/notes/System-upcalls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/System-upcalls/</guid><description>Necessity of System Upcalls To allow applications to implement operating system-like functionality, more than system call is required; applications can also benefit from being told when events occur that need their immediate attention.</description></item><item><title>Thread</title><link>https://azure-wings.github.io/notes/Thread/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Thread/</guid><description>A thread is a single execution sequence that represents a separately schedulable task. Doing so, threads provide the illusion of an infinite number of processors.</description></item><item><title>Thread data structures</title><link>https://azure-wings.github.io/notes/Thread-data-structures/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Thread-data-structures/</guid><description>Per-Thread State and Thread Control Block (TCB) The operating system needs a data structure to represent a threads&amp;rsquo;s state. This data structure is called the thread control block (TCB).</description></item><item><title>Thread life cycle</title><link>https://azure-wings.github.io/notes/Thread-life-cycle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Thread-life-cycle/</guid><description>Init Thread creation thread_create() puts a thread into its init state and allocates and initialises per-thread data structures. Once that is done, thread creation code puts the thread in ready state by adding the thread to the ready list (set of runnable threads that are waiting their turn to use a processor).</description></item><item><title>Thread models</title><link>https://azure-wings.github.io/notes/Thread-models/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Thread-models/</guid><description>Support for threads may be provided either at the user level, for user threads, or by the kernel, for kernel threads.</description></item><item><title>Too much milk problem</title><link>https://azure-wings.github.io/notes/Too-much-milk-problem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Too-much-milk-problem/</guid><description>Definition The Too Much Milk problem models two roommates who share a refrigerator and, who make sure the refrigerator is always well stocked with milk.</description></item><item><title>Topology</title><link>https://azure-wings.github.io/notes/Topology/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Topology/</guid><description/></item><item><title>Update of a view</title><link>https://azure-wings.github.io/notes/Update-of-a-view/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Update-of-a-view/</guid><description>Although [[notes/Views | views]] are a useful tool for queries, they present serious problems when undergoing updates, insertions, or deletions.</description></item><item><title>Vector analysis</title><link>https://azure-wings.github.io/notes/Vector-analysis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Vector-analysis/</guid><description/></item><item><title>Vector space</title><link>https://azure-wings.github.io/notes/Vector-space/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Vector-space/</guid><description>Definition A vector space $V$ over a field $F$ consists of a set on which two operations $+$ (addition) and $\cdot$ (scalar multiplication) are defined so that the followings hold.</description></item><item><title>View of data</title><link>https://azure-wings.github.io/notes/View-of-data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/View-of-data/</guid><description>A major purpose of a database system is to provide users with an abstract view of the data. That is, the system hides certain details of how the data are stored and maintained.</description></item><item><title>Views</title><link>https://azure-wings.github.io/notes/Views/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Views/</guid><description>In some cases, it is not desirable for all users to see the entire [[notes/View of data#Data models | logical model]] (i.</description></item><item><title>Weierstrass approximation theorem</title><link>https://azure-wings.github.io/notes/Weierstrass-approximation-theorem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/Weierstrass-approximation-theorem/</guid><description>Theorem Let $f: \mathbb{R} \to \mathbb{R}$ be a continuous function on the interval $[a,b]$. Then, for any positive $\varepsilon$, there exists $n \in \mathbb{N}$ where for some $n$-degree polynomial $p_n$, $\lVert f - p_n \rVert_{C^0} \leq \varepsilon$ holds.</description></item><item><title>x86 Mode Transfer</title><link>https://azure-wings.github.io/notes/x86-Mode-Transfer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://azure-wings.github.io/notes/x86-Mode-Transfer/</guid><description>Background on x86 Architecture x86 is segmented, so pointers come in two parts.
Segment: A region of memory such as code, data, or stack Offset: An offset within that segment The current user-level instruction is a combination of the code segment (cs) and the instruction pointer (eip / rip) within the code segment.</description></item></channel></rss>